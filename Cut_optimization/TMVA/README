# TMVA

--- Description ---

- Implements a modified version of TMVA rectangle cuts implemented originally at https://github.com/zc11/TMVARectangleForDvn/tree/master


===============================================================


--- Summary ---

- Runs in three parts:
    - 1. myTMVA
    - 2. readxml
    - 3. readxml_fit


1. myTMVA
- Does training based on an MC signal tree and a data background tree, looking at the signal reduction power and background reduction power of multiple sets of multivariable cuts (specified by the user).
- Outputs:
    - ROOT file (unused)
    - xml file containing cuts/weights (used by readxml).
- Executable takes two arguments:
    1. Path to the configuration file
    2. (optional) "myMethodList" - (I don't know what this does...)


2. readxml
- Parses an xml weights file output from myTMVA (the myTMVA directory can be specified) for the set of 100 cuts found.
- Outputs
    - ROOT file containing histograms of data when subject to these 100 cuts (plus 2 other auxiliary histograms that aren't very useful).
    - console output of the 100 cuts.
- Executable takes three arguments:
    1. Path to the configuration file
    2. Path to the InputChain file list (see InputChain documentation)
    3. (optional) Output tag - will be added to the name of the output histogram file


3. readxml_fit (also contained in the readxml directory)
- Performs fits on the histograms (to a double Gaussian with shared mean plus cubic background) contained in the ROOT file output from readxml.
- Outputs:
    - pictures of the fit and calculated values pertaining to the peak.
        - signal significance
        - signal yield fraction
        - raw signal count
        - mean of the Gaussian fit
        - weighted RMS average of the standard deviation of the Gaussians
    - graph of the calculated signal significance for each set of cuts
    - pictures of the signal and background (not very useful)
- Executable takes two arguments:
    1. Path to the configuration file
    2. (optional) Output tag - will be added to the names of all output image files
- Note: most output file paths from the TMVA executables are fully configurable, but readxml_fit always writes to ./plots/ and ./plots/fits/ (This is easy to change, but I never got around to it). Make sure different output tags are used for different jobs.
- Note: readxml_fit performs fitting in the same manner as TryCuts_fit.


- The config_util directory contains the definition for the Configuration (TMVA) class that is used by all three of the programs listed above.
- The config directory is the recommended (but not required) directory for TMVA configuration files (see below).


===============================================================


--- Usage ---

** Setup **

Make sure the ROOT_Util static library is in the ../ROOT_Util directory. If not, cd to that directory and run "make". The ROOT environment must be set up prior to doing this (so the root-config command is valid).

Run the "make" command in myTMVA/src and readxml/src (I haven't gotten around to making a proper makefile in the particle_reco directory...). The ROOT environment must be set up prior to doing this (so the root-config command is valid).  If the C++ boost libraries are not located at /usr/include, modify the INC macro to reflect the proper location.

** Starting a new analysis **

Note: multiple analyses can be run at once (e.g. for different pT bins).

1. Create a configuration file (see instructions below).

2. In the myTMVA directory, configure and run the run_myTMVA.sh. See instructions below for details on configuration.

3. Once the process from step 2 has finished, cd into the readxml directory. Configure and run the appropriate run_readxml script. See instructions below for details on selection and configuration.

4. Some of the scripts launch two jobs at once, one for pPb data and one for Pbp data. If this is the case, the two output files should be merged into one common .root file after the processes from step 3 both finish.

5. Configure and run (also in the readxml directory) run_fit.sh. See instructions below for details on configuration.

6. View the outputs of readxml_fit:
    - The log files (or console output, depending on how readxml_fit was run) list each of the 100 cut configuration along with their corresponding signal significance.
    - The useful image files are the sig_v_eff file (graphically shows significance for each cut) and the cut files for each image.


** Configuration **

The TMVA configuration file is an xml file that specifies a configuration for myTMVA, readxml, and readxml_fit. The three steps in the full TMVA analysis are meant to be run back-to-back, but are kept separated so as to give the use more control over the process. If desired, a script can be written to run all three steps consecutively using a single configuration file (although some merging of files may be necessary in between).

The TMVA configuration class that parses the configuration file is defined in the config_util/ directory.

== Configuration file nodes ==

All of the nodes listed are necessary. No more and no less. The configuration file should follow the node structure indicated by the listing below. Text in angle brackets "<>" indicates the actual names of nodes. Text inside quotation marks indicates node content (quotation marks should be excluded in the actual xml file).

The configuration file is split into four sections. One for shared information, then one for each of the three individual programs.

1. <Shared>
    a. <Files> (Shared i/o configuration)
        i. <signal_file_name> - Absolute or relative path to the .root file in which a signal-only tree is contained. Used for TMVA training.
        ii. <signal_tree_path> - The internal directory path to the signal tree within the .root file, not including the name of the .root file itself.
        iii. <weight_file_path> - Absolute or relative path to the directory where the weights file from myTMVA will be stored.
        iv. <job_name> - An identifier string that will be tagged onto the name of the weights file from myTMVA.
    b. <Cuts> (Base cutting specifications)
        i. <pt_bin_limits> - Should be two numbers, a and b, separated by a comma (no spaces), where a and b are the limits of the parent pT bin of interest. E.g. <pt_bin_limits>2,4</pt_bin_limits> specifies the pT range of [2, 4).
        ii. <abs_y_cm_max> - Specifies the cut of |y_cm| < abs_y_cm_max.
        iii. <pt_dau1_min> - Specifies the cut of pt_dau1 > pt_dau1_min.
        iv. <abs_eta_dau1_max> - Specifies the cut of |eta_dau1| < abs_eta_dau1_max.
        v. <cos_angle_dau1_min> - Specifies the cut of cos(3DPointingAngle_dau1) > cos_angle_dau1_min.
        vi. <decay_length_sig_dau1_min> - Specifies the cut of 3DDecayLengthSig_dau1 > decay_length_sig_dau1_min.
        vii. <abs_mass_dau1_zscore_max> - Specifies the cut of | (mass_dau1 - mass_dau1_mean) / mass_dau1_sigma | <= abs_mass_dau1_zscore_max. (The mean and sigma are separately specified.)
        viii. <pt_dau2_min> - Specifies the cut of pt_dau2 > pt_dau2_min.
        ix. <abs_eta_dau2_max> - Specifies the cut of |eta_dau2| < abs_eta_dau2_max.
        x. <abs_xyDCASig_dau2_max> - Specifies the cut of |xyDCASig_dau2| < abs_xyDCASig_dau2_max.
        xi. <abs_zDCASig_dau2_max> - Specifies the cut of |zDCASig_dau2| < abs_zDCASig_dau2_max.

        xii. <mass_dau1_mean> - The dau1 mean mass used to calculate z-score.
        xiii. <mass_dau1_sigma> - The dau1_mass standard deviation used to calculate z-score.

        xiv. <mass_window_low>
        xv. <mass_window_high>
            - xiv. and xv. specify the parent mass cut and output histogram range of [mass_window_low, mass_window_high)

        xvi. <dEdx>
            * <use_dedx> - Specifies whether or not to use dE/dx cuts. Should be "true" or "false".

            - NOTE: The dE/dx cut is of the form:
                dE/dx >= k_low * (dedx_mass / (p_dau2 - a_low))^2 + c_low   OR   p_dau2 >= x_cutoff_low
                    AND
                dE/dx < k_high * (dedx_mass / (p_dau2 - a_high))^2 + c_high   OR   p_dau2 >= x_cutoff_high
                    AND
                nhits_dau2 >= nhits_dau2_min

                where dE/dx, p_dau2, and nhits_dau2 are candidate-specific values read from input trees, and the rest are specified parameters (below)

            * <dedx_mass>

            * <dedx_kca_high> - comma-separated list (no spaces) of k_high, c_high, a_high
            * <x_cutoff_high>

            * <dedx_kca_low> - comma-separated list (no spaces) of k_low, c_low, a_low
            * <x_cutoff_low>

            * <nhits_dau2_min>

        xvii. <variable_names_list> - comma-separated list (no spaces between elements) of cut-variable expressions to optimize through TMVA. E.g. "pt_dau1,pt_dau2,abs(eta_dau1),abs(eta_dau2)" optimizes on those variables.

2. <myTMVA>
    a. <Files>
        i. <out_file_path_base> - Stub for the .root output file path from myTMVA. The full file path will be formed as:
            out_file_path_base + "_" + job_name + ".root"
        ii. <background_file_name> - Absolute or relative path to the .root file in which a background tree is contained. Used for TMVA training.
        iii. <background_tree_path> - The internal directory path to the background tree within the .root file, not including the name of the .root file itself.
    b. <Vars> (TMVA tuning variable specifications)
        i. <y_cm_correction> - Used for TMVA training cuts. Constant in the equation:
            y_cm = y + y_cm_correction

        ii. <signal_weight> - Weighting for signal in TMVA training.
        iii. <background_weight> - Weighting for signal in TMVA training.

        iv. <pt_branch_name> - Name of the pT branch within the input trees.
        v. <variable_properties> - Comma-separated list of "FMax" and/or "FMin". Corresponds element-wise to <variable_names_list>. "FMax" means to test cut values from the base value to infinity. "FMin" means to test cut values from the base value to zero.

3. <readxml>
    a. <histo_path_base> - Stub for the .root output histogram files from readxml. The full file path will be formed as:
        histo_path_base + (an output tag specified as a parameter when executing readxml) + ".root"
    b. <target_bin_size> - Desired mass bin size for output histograms. Actual bin size will be rounded if the target size doesn't fit into the specified mass range. Number of bins in the histogram is calculated as:
        round( (mass_window_high - mass_window_low) / target_bin_size )
    c. <n_eff> - Number of cut configurations to use in TMVA training. The standard amount is 100.

4. <Fit> (for readxml_fit)
    a. <in_file> - Path to the output histogram file from readxml on which to perform the fit. Depending on the job, this may need to be a merged file rather than one output directly from readxml.
    b. <image_type> - Image file extension for output images. E.g. ".png"
    c. <entry_index_limits> - Should be two numbers, a and b, separated by a comma (no spaces), where a and b are the limits (inclusive) of the cut indices to fit. To fit all standard 100 cuts, use "0,99".
    d. <peak_stdev> - Number specifying how many standard deviations away from the mean counts as the edge of the peak for the purposes of calculating signal significance. Usually 2 or 3.
    e. <peak_mass> - Value around which the peak mass should be. In fitting the mean will be within 0.01 of this value.
    f. <dau1_name> - TLatex expression for the name of the first daughter (used for labeling the histograms).
    g. <dau2_name> - TLatex expression for the name of the second daughter (used for labeling the histograms).


== run_myTMVA.sh configuration ==

PTBIN - Used to define the log file name for myTMVA.
CONFIG_FILE_PATH - Configuration file to use.
LOG_PATH - Path to the directory where the log file will be written. It will be called "{PTBIN}".
EXEC - Path to the TMVAClassification (myTMVA) executable.


== run_readxml scripts and configuration ==

~~ Scripts ~~
The different run_readxml scripts use different InputChain configuration files, which specify the correct input tree files for their respective pT bins. Some also set off more than one job at a time. There is a separate script for:
    1. LambdaPi for pT < 4 (low_pt)
    2. LambdaPi for pT: [4, 6)
    3. LambdaPi for pT >= 6 (high_pt)
    4. KsProton for pT < 6 (low_pt)
    5. KsProton for pT >= 6 (high_pt)

~~ Macros ~~
PTBIN - Used to define the log file name for readxml.
READXML_PATH - Path to the readxml directory (Probably unnecessary now? Haven't tested anything, though).
LOG_PATH - Path to the directory where the log file will be written. It will be called "readxml_{PTBIN}_{pPb or Pbp}.log"
CONFIG_FILE - Path to the configuration file to use.
EXEC - Path to the readxml executable.


== run_fit.sh configuration ==

PTBIN - Used to define the output tag for readxml_fit.
READXML_PATH - Path to the readxml directory. Output images will be written from this directory to the plots/ and plots/fits/ subdirectories.
LOG_NAME - Path to log file to be used.
CONFIG_FILE - Path to the configuration file to use.
EXEC - Path to the readxml_fit executable.
OUT_TAG - Output tag to be used. Make sure this is different for different jobs, or some image files will be overwritten!


===============================================================


--- Subdirectories ---

The "config" subdirectory contains some example configuration files for TMVA.

The "config_util" subdirectory holds some utilities for the program.

** myTMVA **

The "logs" and "outputs" subdirectories hold outputs. "logs" holds log files from both myTMVA. "outputs" holds the .root output files from myTMVA. The storage structure goes along with the run scripts and the example configuration files. This structure is only suggestive and can be altered.

The "src" subdirectory holds source code.

** readxml **

The "includes" subdirectory holds some include files for readxml.

The "histos", and "logs" subdirectories hold outputs. "histos" is meant to hold .root files containing histograms "logs" holds log files from both readxml and readxml_fit. The storage structure goes along with the run scripts and the example configuration files. This structure is only suggestive and can be altered.

The "plots" subdirectory holds image output from readxml_fit. As of now, this is hard-coded. If desired, it should be pretty easy to modify the program to allow a user-specified directory to hold images, but I never got around to it... Sorry.

The "src" subdirectory holds source code.